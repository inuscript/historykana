lerna(verbose) GitUtilities.isInitialized    ()
lerna(verbose) GitUtilities.isInitialized    () => true
lerna(verbose) GitUtilities.getTopLevelDirectory()
lerna(verbose) GitUtilities.getTopLevelDirectory() => "."
lerna(verbose) FileSystemUtilities.existsSync("./lerna.json")
lerna(verbose) FileSystemUtilities.existsSync("./lerna.json") => true
lerna(verbose) FileSystemUtilities.readFileSync("./lerna.json")
lerna(verbose) FileSystemUtilities.readFileSync("./lerna.json") => "{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\"\n}"
lerna(verbose) FileSystemUtilities.existsSync("./package.json")
lerna(verbose) FileSystemUtilities.existsSync("./package.json") => true
lerna(verbose) FileSystemUtilities.readFileSync("./package.json")
lerna(verbose) FileSystemUtilities.readFileSync("./package.json") => "{\n  \"devDependencies\": {\n    \"lerna\": \"2.0.0-beta.38\"\n  }\n}"
lerna(info)    Lerna v2.0.0-beta.38
lerna(info)    Independent Versioning Mode
lerna(verbose) FileSystemUtilities.existsSync("./package.json")
lerna(verbose) FileSystemUtilities.existsSync("./package.json") => true
lerna(verbose) FileSystemUtilities.existsSync("./lerna.json")
lerna(verbose) FileSystemUtilities.existsSync("./lerna.json") => true
lerna(verbose) FileSystemUtilities.existsSync("./VERSION")
lerna(verbose) FileSystemUtilities.existsSync("./VERSION") => false
lerna(verbose) FileSystemUtilities.existsSync("./packages/historykana/package.json")
lerna(verbose) FileSystemUtilities.existsSync("./packages/historykana/package.json") => true
lerna(verbose) Attempting running ExecCommand.initialize
lerna(verbose) Successfully ran ExecCommand.initialize
lerna(verbose) Attempting running ExecCommand.execute
lerna(error)   Errored while running command 'install' with arguments '' in 'historykana'
lerna(error)   Errored while running ExecCommand.execute
    Command exited with status 64: install 
